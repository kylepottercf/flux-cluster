apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 10m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: "61.x" # Use latest stable version
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: monitoring
  values:
    # Grafana Configuration
    grafana:
      enabled: true

      existingSecret: "grafana-admin"
      userKey: admin-user
      passwordKey: admin-password

      # Persistence for dashboards
      persistence:
        enabled: true
        size: 5Gi
        accessModes:
          - ReadWriteOnce

      # Service configuration
      service:
        type: ClusterIP
        port: 80

      # Ingress configuration
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
        hosts:
          - grafana.yourdomain.com # Change to your domain
        tls:
          - secretName: grafana-tls
            hosts:
              - grafana.yourdomain.com # Change to your domain

      # Additional datasources
      additionalDataSources:
        - name: Loki
          type: loki
          url: http://loki:3100 # If you have Loki installed
          access: proxy
          isDefault: false

      # Sidecar for loading dashboards
      sidecar:
        dashboards:
          enabled: true
          searchNamespace: ALL
          provider:
            foldersFromFilesStructure: true
        datasources:
          enabled: true
          searchNamespace: ALL

      # Pre-installed plugins
      plugins:
        - grafana-piechart-panel
        - grafana-clock-panel
        - grafana-simple-json-datasource

    # Prometheus Configuration
    prometheus:
      enabled: true

      prometheusSpec:
        # Resource limits
        resources:
          requests:
            memory: 400Mi
            cpu: 100m
          limits:
            memory: 2Gi
            cpu: 1000m

        # Retention
        retention: 30d
        retentionSize: "10GB"

        # Storage
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 20Gi

        # Service monitors - auto-discover services
        serviceMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        ruleSelectorNilUsesHelmValues: false
        ruleSelector: {}

    # AlertManager Configuration
    alertmanager:
      enabled: true

      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 5Gi

        # Example Slack configuration (optional)
        # config:
        #   global:
        #     slack_api_url: 'YOUR_SLACK_WEBHOOK_URL'
        #   route:
        #     group_by: ['alertname', 'cluster', 'service']
        #     group_wait: 10s
        #     group_interval: 10s
        #     repeat_interval: 12h
        #     receiver: 'slack'
        #   receivers:
        #   - name: 'slack'
        #     slack_configs:
        #     - channel: '#alerts'

    # Node Exporter for hardware metrics
    nodeExporter:
      enabled: true

    # Kube State Metrics
    kubeStateMetrics:
      enabled: true

    # Prometheus Operator
    prometheusOperator:
      enabled: true

    # Disable components you don't need
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false # Often not accessible in managed k8s
    kubeScheduler:
      enabled: false # Often not accessible in managed k8s
    kubeProxy:
      enabled: true
    kubeEtcd:
      enabled: false # Often not accessible in managed k8s
